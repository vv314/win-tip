{"code":"import * as tslib_1 from \"tslib\";\r\nimport './style.css';\r\nimport { query, querys, createEl, likeNumber, isElement, isFunc, append, space2dash, stringify } from './utils';\r\nvar BOX_CLASS_NAME = '_win_tip_box';\r\nvar TIP_CLASS_NAME = '_win_tip';\r\nvar TIP_ID_PREFIX = '_tip_';\r\nvar BOX_SLEEP = '_win_tip_box--sleep';\r\nvar WARN_COLOR = '#fee381';\r\nvar ERROR_COLOR = '#ff4545';\r\nvar WEAK_TIME = 30 * 1000;\r\n// start from 1\r\nvar tipNo = 1;\r\nvar sleepTimer = 0;\r\nvar log = console.log;\r\nvar settings = {\r\n    // 'debug', 'info', 'warn', 'error'\r\n    output: true,\r\n    console: false,\r\n    opacity: 0.75,\r\n    color: '#fff'\r\n};\r\nfunction consoleProxy(isOpen) {\r\n    var mlog = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        winTip.apply(winTip, args);\r\n        log.apply(console, args);\r\n    };\r\n    console.log = isOpen ? mlog : log;\r\n}\r\nfunction checkDisplayLevel(baseLevel) {\r\n    if (baseLevel === void 0) { baseLevel = 'debug'; }\r\n    var ranking = ['debug', 'info', 'warn', 'error'];\r\n    var outputLevel = ranking.indexOf(\"\" + settings.output) < 0\r\n        ? ranking.length\r\n        : ranking.indexOf(\"\" + settings.output);\r\n    return ranking.indexOf(baseLevel) >= outputLevel || settings.output === true;\r\n}\r\nvar winTip = function () {\r\n    var args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        args[_i] = arguments[_i];\r\n    }\r\n    var idStr = getNewTipId();\r\n    var tipNode = query(\".\" + idStr);\r\n    var isRender = checkDisplayLevel('debug') && args.length;\r\n    // return a empty object({}) when output is false\r\n    // normaly return a Element object\r\n    return isRender ? renderTip(tipNode, [idStr], joinWithSpace(args)) : {};\r\n};\r\nfunction getNewTipId(name) {\r\n    name = name === undefined ? tipNo++ : name;\r\n    return space2dash(TIP_ID_PREFIX + name);\r\n}\r\nfunction joinWithSpace(args, prefix) {\r\n    if (prefix === void 0) { prefix = ''; }\r\n    var res = args\r\n        .map(function (e) { return (typeof e === 'object' ? stringify(e) : \"\" + e); })\r\n        .join(' ');\r\n    return prefix ? \"[\" + prefix + \"] \" + res : res;\r\n}\r\nfunction createTipFragment(idArr, msg, opts) {\r\n    var fragment = document.createDocumentFragment();\r\n    var tip = createEl('span');\r\n    tip.className = [TIP_CLASS_NAME].concat(idArr).join(' ');\r\n    tip.textContent = msg;\r\n    append(fragment, tipDecorator(tip, opts));\r\n    append(fragment, createEl('br'));\r\n    return fragment;\r\n}\r\nfunction createTipBox(fragment) {\r\n    var box = createEl('div');\r\n    box.className = BOX_CLASS_NAME;\r\n    box.style.color = settings.color || null;\r\n    box.onclick = function () { return weakUp(box); };\r\n    return append(box, fragment);\r\n}\r\nfunction weakUp(tipBox) {\r\n    clearTimeout(sleepTimer);\r\n    tipBox.classList.remove(BOX_SLEEP);\r\n    setTimeout(sleep, WEAK_TIME, tipBox);\r\n}\r\nfunction sleep(tipBox) {\r\n    tipBox.classList.add(BOX_SLEEP);\r\n}\r\nfunction tipDecorator(tipNode, opts) {\r\n    // handle global option firstly\r\n    if (settings.opacity != 0.75) {\r\n        tipNode.style.backgroundColor = \"rgba(0, 0, 0, \" + settings.opacity + \")\";\r\n    }\r\n    if (!opts)\r\n        return tipNode;\r\n    var color = opts.color, level = opts.level;\r\n    if (color)\r\n        tipNode.style.color = color;\r\n    if (level)\r\n        tipNode.dataset.level = level;\r\n    return tipNode;\r\n}\r\nfunction renderTip(tipNode, idArr, msg, opts) {\r\n    var tipBox = query(\".\" + BOX_CLASS_NAME);\r\n    var tipFragment = createTipFragment(idArr, msg, opts);\r\n    if (tipNode) {\r\n        tipNode.textContent = msg;\r\n        return tipDecorator(tipNode, opts);\r\n    }\r\n    if (tipBox) {\r\n        append(tipBox, tipFragment);\r\n        // scroll to bottom\r\n        tipBox.scrollTop = tipBox.scrollHeight;\r\n        weakUp(tipBox);\r\n    }\r\n    else {\r\n        var box = createTipBox(tipFragment);\r\n        append(document.body, box);\r\n    }\r\n    return query(\".\" + idArr.join(' .'));\r\n}\r\nfunction wintipFactory(name, tipNode, opts) {\r\n    var tipFn = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        var idArr = likeNumber(name)\r\n            ? [getNewTipId()]\r\n            : [getNewTipId(), getNewTipId(name)];\r\n        var isRender = checkDisplayLevel(opts.level) && args.length;\r\n        return isRender\r\n            ? renderTip(tipNode || query(\".\" + getNewTipId(name)), idArr, joinWithSpace(args, likeNumber(name) ? '' : name), opts)\r\n            : null;\r\n    };\r\n    tipFn['__name'] = name;\r\n    return tipFn;\r\n}\r\nwinTip.remove = function (tip) {\r\n    if (!tip)\r\n        return;\r\n    var node;\r\n    if (isElement(tip)) {\r\n        node = tip;\r\n    }\r\n    else if (isFunc(tip)) {\r\n        node = query(\".\" + getNewTipId(tip.__name));\r\n    }\r\n    else if (likeNumber(tip)) {\r\n        node = querys(\".\" + TIP_CLASS_NAME)[tip];\r\n    }\r\n    else {\r\n        node = query(\".\" + getNewTipId(tip));\r\n    }\r\n    if (!node)\r\n        return;\r\n    node.nextElementSibling && node.nextElementSibling.remove();\r\n    node.remove();\r\n};\r\nwinTip.config = function (opts) {\r\n    settings = tslib_1.__assign({}, settings, opts);\r\n    // consoleProxy is 'debug' level\r\n    consoleProxy(checkDisplayLevel('debug') && !!settings.console);\r\n};\r\nwinTip.$ = function (name, opts) {\r\n    if (opts === void 0) { opts = {}; }\r\n    if (name && typeof name === 'object')\r\n        return wintipFactory('', null, name);\r\n    var tipNode = query(\".\" + getNewTipId(name));\r\n    if (likeNumber(name) && !tipNode) {\r\n        throw new Error(\"[wintip]: name \" + name + \" is not defined\");\r\n    }\r\n    return wintipFactory((\"\" + name).trim(), tipNode, opts);\r\n};\r\n// sugas\r\nwinTip.info = function () {\r\n    var args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        args[_i] = arguments[_i];\r\n    }\r\n    return winTip.$({ level: 'info' }).apply(winTip, args);\r\n};\r\nwinTip.warn = function () {\r\n    var args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        args[_i] = arguments[_i];\r\n    }\r\n    return winTip.$({ color: WARN_COLOR, level: 'warn' }).apply(winTip, args);\r\n};\r\nwinTip.error = function () {\r\n    var args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        args[_i] = arguments[_i];\r\n    }\r\n    return winTip.$({ color: ERROR_COLOR, level: 'error' }).apply(winTip, args);\r\n};\r\nwinTip.version = '1.5.0';\r\nexport default winTip;\r\n"}
